{"version":3,"sources":["components/Header.js","components/PersonRow.js","components/Profile.js","components/MainContain.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","PersonRow","personInfo","className","style","borderRadius","width","src","profileImage","alt","float","fontSize","lineHeight","firstName","lastName","padding","textAlign","phone","address","streetAddress","country","Profile","person","boxShadow","margin","fontWeight","textDecoration","textShadow","id","email","background","color","display","city","state","zipCode","countryCode","MainContain","showProfile","setState","profile","closeProfile","people","fetch","then","response","json","jsonObj","map","this","position","transition","onClick","right","top","cursor","length","index","key","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d06ed00.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n    return <header>\n        People\n    </header>\n}","import React from 'react';\n\nimport '../styles/personRow.css';\n\nexport const PersonRow = ({personInfo}) => {\n    return <p className=\"personRow\">\n        <img style={{ borderRadius:'50%', width: '10%'}} src={personInfo.profileImage} alt=\"profile\" />\n        <div style={{width:'85%', float: 'right'}}>\n            <span className=\"personName\" style={{fontSize: '2.42vw', lineHeight: '2.75em'}}>{personInfo.firstName + ' ' + personInfo.lastName}</span>\n            <span style={{float: 'right', padding: '0em 1em',fontSize: '1vw', textAlign:'right'}}>\n                <p>{personInfo.phone}</p>\n                <p>{personInfo.address.streetAddress + ', ' + personInfo.address.country}</p>\n            </span>\n        </div>\n    </p>\n}","import React from 'react'\n\nimport '../styles/profile.css'\n\nexport const Profile = ({person}) => {\n    return (\n        <div className=\"profile\">\n            <img style={{width: '25%',boxShadow: '2px 2px 20px grey', borderRadius: '50%', margin:'0em auto'}} src={person.profileImage} alt=\"profileImage\"/>\n            <h2> {person.firstName + ' ' + person.lastName}</h2>\n            <div className=\"info\">\n                <div className=\"col3-1\" style={{textAlign: 'left'}}>\n                    <ul>\n                        <li><span style={{ fontWeight: 'bold', textDecoration: 'underline', textShadow:'1px 1px 2px grey'}}>Basic Information </span></li>\n                        <li><span>ID: </span> {person.id }</li>\n                        <li><span>First Name: </span> {person.firstName }</li>\n                        <li><span>Last Name: </span> { person.lastName}</li>\n                        <li><span>Phone: </span> {person.phone}</li>\n                        <li><span>Email: </span> {person.email}</li>\n                        <li><span>Address: </span> {person.address.streetAddress + ', ' + person.address.country}</li>\n                    </ul>                    \n                </div>\n                <div className=\"col3-1\" style={{ borderRadius: '25%', background: '#82ccdd', color: 'white', padding: '1.25vw',  margin:'1.5vw', display: 'inline-block', width:'2vw'}}>\n                    ID: {person.id}          \n                </div>\n                <div className=\"col3-1\"  style={{textAlign: 'right'}}>\n                    <ul>\n                        <li><span style={{ fontWeight: 'bold', textDecoration: 'underline', textShadow:'1px 1px 2px grey'}}>Detail Address </span></li>\n                        <li><span>City: </span> {person.address.city }</li>\n                        <li><span>State: </span> {person.address.state }</li>\n                        <li><span>Country: </span> {person.address.country }</li>\n                        <li><span>Zip Code: </span> {person.address.zipCode }</li>\n                        <li><span>Country Code: </span> {person.address.countryCode }</li>\n                        <li><span>Street Address: </span> {person.address.streetAddress }</li>\n                    </ul>                    \n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nimport {PersonRow} from './PersonRow'\nimport {Profile} from './Profile'\n\n// function withClose(Component){\n//     return function(props) {\n//         console.log(JSON.stringify(props));\n//         return(\n//             <div>\n//                 <div style={{position: 'absolute', right: '25px', top: '25px', background: 'rgba(100,100,100,0.25)', borderRadius: '50%', padding: '1em'}}>X</div>\n//                 <Component/>\n//             </div>\n//         )\n//     }\n// }\n\nclass MainContain extends React.Component {\n\n    constructor(){\n        super()\n\n        this.state = {\n            people : [],\n            profile: null,\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"https://mock-io.herokuapp.com/users\").then( response => response.json()).then( jsonObj => {\n            jsonObj.map( person => {\n                this.setState({\n                    people : [...this.state.people, person]\n                } );\n                return person\n            });\n        })\n    }\n\n\n\n    render(){\n        return <section style={{background: 'rgba(200,200,200,0.2)', padding: '2%', margin: '2% auto', borderRadius:'1.5em', boxShadow: '2px 2px 5px silver'}}>\n            { !this.state.profile  ? (\n                <ul>\n                {\n                    this.state.people.length>0?\n                    this.state.people.map( (person,index) => {\n                        return (\n                            <li key={index} onClick={() => this.showProfile(person)}><PersonRow personInfo={person}/></li>\n                        )\n                    } )\n                    :\n                    <p style={{textAlign: 'center', fontSize: '2em'}}> Loading... </p>\n                }\n                </ul>\n            ) : (\n                // withClose(<Profile person={this.state.profile} />)\n\n                <div style={{position: 'relative' , transition: '2s all'}}>\n                    <div onClick={this.closeProfile} style={{position: 'absolute', right: '1em', top: '1em', background: 'rgba(255,50,50,0.25)', color: 'grey' ,cursor: 'pointer' , boxShadow: '2px 2px 4px silver', borderRadius: '50%', padding: '1em 1.2em'}}>X</div>\n                    <Profile person={this.state.profile} />\n                </div>\n            )}\n        </section>\n    }\n\n\n    showProfile = (person) => {\n        this.setState({\n            profile: person\n        });\n    }\n\n    closeProfile = () => {\n        this.setState({\n            profile: null\n        });\n    }\n}\n\nexport default MainContain;","import React from 'react'\n\nexport const Footer = () => {\n    return <footer>\n        2020, lfTech\n    </footer>\n}","import React from 'react';\n\nimport {Header} from './components/Header';\nimport MainContain from './components/MainContain';\nimport {Footer} from './components/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <Header />\n            <MainContain />\n          <Footer />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n//https://mock-io.herokuapp.com/users"],"sourceRoot":""}